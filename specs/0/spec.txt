Kot Spec - Version 0 - Stage Alpha

!!! This may not represent the code in the example files. !!!
!!! This may be out of date. !!!

Ideas:
    - Let types be inferrable?

- Kot File
    Lines after the first marked with # at the start will have their data put into the metadata of the file.
    Lines after start the data file.

- Kot Build File
    First line must include KOT_BUILD_FILE.
    Data is listed as: [KEY]\n DATA

- Comments
    // = Single line.
    /* */ = Multi-line. (You cannot have a multi-line comment within another multi-line comment.)
    # = Build file single line.

- Types
    val, let, or data is used to mark an entry.
    Primitive:
        Only 64 bit numbers for now.
        Number Type:
            - char, chr (4 bytes big or whatever rust does)
            - int, i64
            - uint, u64
            - float, f64
            - byte, u8
        Other:
            - string, str
            - boolean, bool

    Array:
        Cannot have an array of objects.
        - Primitive[]

    List: ??? instead of array? of universial tuple?

    Object:
        - object, obj

- Strings
    All strings are treated as raw strings.
    Using the same number of # before the first " and after the last ", allows the contents of the string to be imported correctly.
    (Like Rust's raw strings.)

- Operators
    THERE IS NO CASTING. (Some types can be auto cast into other types though.)
    - .. = Append Primitives together into a string.
    - !, &&, || = Logic for booleans.
    - +, -, *, / = (byte -> char -> i64 -> u64 -> f64) Casts to biggest type then does arithmetic.
    - % = Casts a number type to u64 then evaluates.
    - ==, !=, >, <, >=, <=  = (byte -> char -> i64 -> u64 -> f64) Casts to biggest type then compares.
    - &, |, ^, ~, << u64, >> u64 = Does a bitwise operation on a number type.

- Functions
    You cannot make your own functions.
    To call a function use: fn function_name(args)
    Standard:
        - pow(Number1, Number2) -> number = (byte -> char -> i64 -> u64 -> f64) Casts to the biggest type then does Number1 ^ Number2.
        - format(string, Primitive...) -> string = Puts Primitives into {}, located in the format string.

- File Extensions and names
    Kot build file = kot.build
    Kot cache file = kot.cache
    Extensions:
      - kot: Data files.
      - koi: File to hold constants and interfaces.
      - kob: Binary file.
      - kog: Compressed binary file. <- Maybe?
      - koe: Encrypted binary file. <- Maybe?
      - koz: Compressed and Encrypted binary file. (Or encrypted then compressed?) <- Maybe?

- Compiled File
    Compiled files will hold kot data in binary and checked form. It also evaluates all experessions.

- Build File
    The build file will hold all *.kot files to be compiled.
    It will also allow each input file to be mapped to another location, as well as allowing the build folder to be moved.
    Builds using a build file will evaluate all paths from the location of the build file.

- Cache File
    The cache file just keeps a hash each *.kot file and the build file to make builds faster.
