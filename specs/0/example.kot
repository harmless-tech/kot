#NAME Example Program
#VERSION 0.0.2
#AUTHORS harmless-tech (Harmless_Tech)
#WEBSITE https://harmless.tech/languages/kot
#GIT https://github.com/harmless-tech/kot
#ISSUES https://github.com/harmless-tech/kot/issues

// The first lines after the first line will have a metadata section. Anything in this section will be put into the .kob file as metadata.

// This is a one line comment.
/*
 * This is a multiline comment.
 */

let hey: int = 0
let TEST: u64 = 0

interface iiTest {
    data f1: int
    data f2: string
}

data s: str =
#"    letid string"#
data s: str =
####"    letid string 2"####

let tern: bool = true ? true : false
let pow: int = fun pow(hey, 2)
let fpow: float = fun pow(1.5, 1_0_0.1) // Can have underscores in numbers.
let upow: uint = fun pow(TEST, 0)
let f: string = fun format("Num: {}", 0)
let cc: chr = '	'
let cc: chr = '
'

let i_test_me: comply iiTest {
    data f1 = 10
    data f2 = "Strings" .. " are " .. "cool!"
}

let tech: bool = 0 as u64
data heyyy: int = 0

let tup: (int, str) = (0, "string!")

#META Hello! Am data.

// \n and \t not converted in strings.
// All strings are considered raw.
let T_STRING: str = #"This
is
a
string
with
"newlines"
after
each
word.
"#
let str_comment: string = "// There can be comments in a string.
As such this comment is ignored."

let sss: str = ###"let sss: str = ##"let sss: str = ##""####"##"###
let ss1: str = ##""#"##

let newline: chr = '\n' // Only \n and \t converted into characters.

let HEY: object = {
    let letue: string = "Hey!"
    let let2: str[] = ["", ""]
}

let arr: int[] = [0, 1, 2, 3, 4, 5,
    6, 7, 8, 1 + 1]

let bigger_arr: int[] = arr .. 6 // Appends 6 to arr.
data bigger_arr: int[] = arr .. [6, 7, 8] // Appends 6, 7, 8 to arr.

data arr_scale: int[] = arr * 8 // Scales every letue in array by * 8.

let add: int = 1 + 2.0 // Converted to f64 then back to i64

let take: (str, str) = (tup.1, HEY.let2[0])
