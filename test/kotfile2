# Names: kotfile, .kotfile, Kotfile, .Kotfile, KOTFILE, .KOTFILE
# Version: --kot version

# {{}} substitution can only contain variable names!

# Config
# Allows kot to cache the ast of this file under .kotfile.cache.
# Tells kot the max amount of cmds to run in parallel.
#kot cacheable=true,threads=4

.os macos linux { let kot.shell = "/bin/zsh -c" }
.family windows { let kot.shell = "pwsh /NOLOGO /C" }
.arch x86_64 { kot.env.AMD64 = true }

# kot.platform.triplet (rust triplets)
# kot.platform.os
# kot.platform.family
# kot.platform.arch

let string = "abc"
let string = r#"abc""#

let cmd = `echo 20`
cmd

.regex regex (gmxUsi) { "h{0}" }
let m1 = regex.match("hello").0
let m1 = regex.match("hello").result

let all_args = .args { # Cannot do --kot
    -i: arg,  # Since - args can be combined together if these two are combined then
    -v: arg,  # it will take like this -> -iv [I] [V], -vi [V] [I], -iv=[I] [V], -vi=[V] [I]
    -r: flag, # -irv [I] [V]
    # -1: flag # Cannot start ident with number
    -m: flag,
    --release: flag, # -- args cannot be combined.
    --abc: arg(con: $.len < 23), # Default type is string
    --123: arg(type: int, con: 0..=1),
    ps0: pos(0),
    ps1: pos(1),
    ps2: pos(2, required: true, type: int, con: $ < 0), # Since this is required, then others are also required
}

# Functions can return an object
.fn runner (a, b, c) {
    cmd
    .return { a, b, c }
}

const jump = "jump" # Cannot be rebound

`echo 'Hello, \ # Hello, World!
       World!'`

.cmd {
    `echo 'hello!'`
    `echo "Workdir: {{ kot.pwd }}"`
}

.cmd run (args: all_args) {
    if let a = --abc {
        `echo "abc = {{ --abc }}, {{a}}"`
    }

    .cmd 23 { # Subcommand (Inherits args from above)
        let p = .parallel (no_fail: true) { # Runs commands in parallel maxing out at however many cpu cores there are. (Use '#kot threads=$NUMBER' to set manually)
            let a = `cargo +nightly fmt --check`
            `cargo clippy --all-targets --locked --workspace -- -D warnings` # binding is discarded

            .return { a } # Returns an object with a in it.
        }
        # p.a, p.a.stdout, p.a.stderr, p.a.output (stdout and stderr), p.a.code (exit code)

        if a.code == 0 { `echo 'Successful exit!'` }

        .arch aarch64 { `echo 'Hello'` }

        let a = if kot.env.CARGO_HOME { kot.env.CARGO_HOME } else { .none } # .none == null
        let a = if let b = kot.env.CARGO_HOME { b }
        if a { `echo "CARGO HOME: $CARGO_HOME"` }
    }
}

# Logic?
# Only logical and compare ops for now. (==, !=, <, >, <=, >=, &&, ||, !)
# let logic = 1 + 2 - 3 * 100 / 10 % 40 && 1
