# Names: kotfile, .kotfile, Kotfile, .Kotfile, KOTFILE, .KOTFILE
# Version: --kot version=true

# {{}} substitution can only contain variable names!

# Config
# Allows kot to cache the ast of this file under .kotfile.cache.
# Tells kot the max amount of cmds to run in parallel. (Kot itself will always use a max of two threads unless build with --no-default-features)
# Tells kot to only run this file if it supports i64 as its int type.
#kot cache=true,children=4,require_i64=true

.triplet aarch64-apple-darwin { }
.os macos linux { let kot.shell = ""  }
.family windows { let kot.shell = "" }
.arch x86_64 { kot.env.AMD64 = true }

# kot.platform.triplet (rust triplets)
# kot.platform.os
# kot.platform.family
# kot.platform.arch

let plus = "pl" + "us"

let aaa = ""
let abbb = "str\""
let one = "oneee"

let quote = r#"""""#
let string = r##"""abc"abc"""##
let sr = r""
let sr = r#"""

"""#

let cmd = `echo 20`
cmd

guard if let ll = kot.dev.none {
    .panic "Wrong!"
}

.regex regex (gmxUsi) { "h{0}" }
let m1 = regex.match("hello").0
let m1 = regex.match("hello").result

let all_args = .args { # Cannot do --kot
    -i: arg(double: --interstate),  # Since - args can be combined together if these two are combined then
    -v: arg,  # it will take like this -> -iv [I] [V], -vi [V] [I], -iv=[I] [V], -vi=[V] [I]
    -r: flag, # -irv [I] [V]
    -m: flag,
    --release: flag, # -- args cannot be combined.
    --abc: arg(con: $.len() < 23), # Default type is string
    --123: arg(type: int, con: 0..=1),
    ps0: pos(0),
    ps1: pos(1),
    ps2: pos(2, required: true, type: int, con: $ < 0), # Since this is required, then others are also required
}

# Functions can return an object
fn runner (a, b, c) {
    cmd
    .return { a, b, c }
}

const jump = "echo" # Cannot be rebound
`{{ jump }}` # Run a string has a command.

# If this fails it exits it will kill kot.
`echo 'Hello, \
       World!'`

# This will not kill the program if it fails to exit.
let b = `echo Hello World!`
b.success # If not true, then kot will stop here.

.cmd {
    `echo 'hello!'`
    `echo "Workdir: {{ kot.pwd }}"`
}

.cmd run (args: all_args) {
    if let a = --abc {
    }

    .cmd 23 { # Subcommand (Inherits args from above)
        let p = .parallel (no_fail: true) { # Runs commands in parallel maxing out at however many cpu cores there are. (Use '#kot threads=$NUMBER' to set manually)
            let a =

            .return { a } # Returns an object with a in it.
        }
        # p.a, p.a.stdout, p.a.stderr, p.a.output (stdout and stderr), p.a.code (exit code)

        if a.code == 0 {  }

        .arch aarch64 {  }

        let a = if kot.env.CARGO_HOME { kot.env.CARGO_HOME } else { .none } # .none == null
        let a = if let b = kot.env.CARGO_HOME { b }
        if a {  }
    }

    # Exit with code 10.
    .exit 10
}

let abc=23

let abc

# Spawn will spawn all commands within, but it will not return anything.
.spawn { `echo 'sep'` }

# Logic?
# Only logical and compare ops for now. (==, !=, <, >, <=, >=, &&, ||, !)
# let logic = 1 + 2 - 3 * 100 / 10 % 40 && 1
